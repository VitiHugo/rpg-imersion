// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  first_name     String
  last_name      String
  beyondUsername String
  beyondUrl      String
  imageUrl       String?
  status         Boolean  @default(true)
  modifiedBy     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  characters Character[]

  @@map("users")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String
  imageUrl    String?
  status      Boolean  @default(true)
  modifiedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("campaigns")
}

model Setting {
  id          String      @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  status      Boolean     @default(true)
  modifiedBy  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  Character   Character[]

  @@map("settings")
}

model Area {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  status      Boolean  @default(true)
  modifiedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("areas")
}

model EventType {
  id         String   @id @default(cuid())
  name       String
  status     Boolean  @default(true)
  modifiedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("eventTypes")
}

model CharacterType {
  id         Int         @id @default(autoincrement())
  name       String
  status     Boolean     @default(true)
  modifiedBy String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  Character  Character[]

  @@map("characterTypes")
}

model Character {
  id String @id @default(cuid())

  firstName   String
  lastName    String
  imageUrl    String?
  description String
  origin      String
  faction     String
  size        String
  race        String
  alive       Boolean
  beyondUrl   String
  status      Boolean  @default(true)
  modifiedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  characterType   CharacterType @relation(fields: [characterTypeId], references: [id])
  characterTypeId Int

  setting   Setting @relation(fields: [settingId], references: [id])
  settingId String

  @@map("characters")
}

model AbilityScore {
  id          String  @id @default(cuid())
  name        String
  fullName    String
  description String?

  status     Boolean  @default(true)
  modifiedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  Skill Skill[]

  @@map("abilityScores")
}

model Skill {
  id             String  @id @default(cuid())
  name           String
  description    String?
  abilityScoreId String

  status     Boolean  @default(true)
  modifiedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  AbilityScore AbilityScore @relation(fields: [abilityScoreId], references: [id])

  @@map("skills")
}
